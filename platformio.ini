;PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
; default_envs = build_SAMD
libdeps_dir = /tmp/libdeps

[env]
framework = arduino
build_flags = 
  ; optimize knx stack
  -D SMALL_GROUPOBJECT
  -D USE_BINSEARCH
  -D SENSORMODULE
  -D LOGICMODULE
  -D OVERRUN_COUNT=31
  -D EOPR_TIMEOUT=32
  -D MASK_VERSION=0x07B0
  ; use flash directly
  ;flash start at 1.5MiB
  -D KNX_FLASH_SIZE=0x8000
  ; use EEPROM emulation
  ;-D DEBUG_TIMING
  ;-D LOGIC_TRACE
  -Wno-unknown-pragmas 
  -Wno-switch
  -Wno-write-strings
  -Wno-format-overflow
  -L../OGM-SensorDevices/src/bsec/cortex-m0plus
  -lalgobsec
  ; debug timing in knx stack
monitor_speed = 115200
monitor_filters = 
  time
lib_ldf_mode = deep+
lib_deps = 
  SPI
  Wire
  ; adafruit/Adafruit SleepyDog Library @ 1.4.0
  adafruit/Adafruit BME280 Library @ 2.1.2
  adafruit/Adafruit VEML7700 Library @ 2.1.0
  ; adafruit/Adafruit SCD30 @ ^1.0.6
  sparkfun/SparkFun SCD30 Arduino Library @ 1.0.14
  sensirion/Sensirion I2C SCD4x @ 0.3.1
  pololu/VL53L1X @ 1.2.1
debug_tool = jlink
upload_protocol = jlink
debug_build_flags = -O0 -ggdb3
debug_extra_cmds = 
  set output-radix 16
extra_scripts = 
  lib/OAM-LogicModule/show_flash_partitioning.py 

[RP2040]
; platform = raspberrypi
platform = https://github.com/maxgerhardt/platform-raspberrypi.git#ac45b10
platform_packages = framework-arduinopico @ https://github.com/earlephilhower/arduino-pico/releases/download/3.3.2/rp2040-3.3.2.zip
board = rpipico ; is overwriteable in e.g. release or develop envs
board_build.core = earlephilhower
; platform_packages = 
  ; framework-arduinopico@https://github.com/earlephilhower/arduino-pico.git#2.3.2
  ; framework-arduinopico@https://github.com/earlephilhower/arduino-pico.git

; configure filesystem size. Default 0 Mbyte.
; board_build.filesystem_size = 1M
; inject core package.. not yet registered with PlatformIO
; registry, so pull working version directly from git / download page.
; note that download link for toolchain is specific for OS. see https://github.com/earlephilhower/pico-quick-toolchain/releases.
; platform_packages = 
;     mumpf/framework-arduinopico@https://github.com/mumpf/arduino-pico.git
;     maxgerhardt/toolchain-pico@https://github.com/earlephilhower/pico-quick-toolchain/releases/download/1.3.2-a/x86_64-w64-mingw32.arm-none-eabi-9d55fd1.220202.zip

;     ; maxgerhardt/framework-arduinopico@file://c:\users\d019748\platformio\arduino-pico
build_flags =
  ${env.build_flags}
  -D SERIAL_DEBUG=Serial
  ;flash start at 1.5MiB
  -D KNX_FLASH_OFFSET=0x180000 
  ; -D USE_RP2040_EEPROM_EMULATION
  ; -D USE_RP2040_LARGE_EEPROM_EMULATION
  -D PIO_FRAMEWORK_ARDUINO_ENABLE_RTTI
  -D LWIP_DONT_PROVIDE_BYTEORDER_FUNCTIONS
  -O0
  
[SAMD]
platform = atmelsam
board = zeroUSB
build_flags = 
  ${env.build_flags}
  -D SERIAL_DEBUG=SerialUSB
  ; use EEPROM emulation
  ; -D USE_SAMD_EEPROM_EMULATION
  ; -D CRYSTALLESS
  ; -D WATCHDOG
  -Wno-unknown-pragmas 
  -Wno-switch
lib_deps = 
  ${env.lib_deps}
  adafruit/Adafruit SleepyDog Library @ 1.4.0
debug_build_flags = -Os -ggdb3


[RP2040_develop]
build_flags =
  -D DEBUG_DELAY=10000
  -D BOARD_SMARTMF_1TE_RP2040
  ; -D BOARD_MASIFI_SENSOR_BREAKOUT
  -D PRESENCEMODULE
  -D WIREMODULE

[SAMD_develop]
build_flags =
  -D DEBUG_DELAY=10000
  -D BOARD_MASIFI_V3
  -D PRESENCEMODULE
  ; -D WIREMODULE

[env:build_RP2040]
extends = RP2040
build_flags =
  ${RP2040.build_flags}
  ${RP2040_develop.build_flags}

[env:build_SAMD]
extends = SAMD
build_flags =
  ${SAMD.build_flags}
  ${SAMD_develop.build_flags}

[env:upload_USB_RP2040]
extends = RP2040
build_flags = 
  ${RP2040.build_flags} 
  ${RP2040_develop.build_flags}
upload_protocol = picotool

[env:upload_USB_SAMD]
extends = SAMD
build_flags = 
  ${SAMD.build_flags} 
  ${SAMD_develop.build_flags}
upload_protocol = sam-ba

[env:upload_JLINK_RP2040]
extends = RP2040
build_flags = 
  ${RP2040.build_flags} 
  ${RP2040_develop.build_flags}
upload_protocol = jlink

[env:upload_JLINK_SAMD]
extends = SAMD
build_flags = 
  ${SAMD.build_flags} 
  ${SAMD_develop.build_flags}
upload_protocol = jlink

[env:upload_Release_JLINK_SAMD]
extends = SAMD
build_flags =
  ${SAMD.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_V3
  -D PRESENCEMODULE
upload_protocol = jlink

#### Release Environments
[env:release_Sensormodul_Breakout_RP2040]
extends = RP2040
build_flags =
  ${RP2040.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_SENSOR_BREAKOUT
  -D PRESENCEMODULE
  -D WIREMODULE

[env:release_Sensormodul_v31_SAMD_Wire]
extends = SAMD
build_flags =
  ${SAMD.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_V31
  -D WIREMODULE

[env:release_Sensormodul_v31_SAMD_Vpm]
extends = SAMD
build_flags =
  ${SAMD.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_V31
  -D PRESENCEMODULE

[env:release_Sensormodul_v30_SAMD_Wire]
extends = SAMD
build_flags =
  ${SAMD.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_V3
  -D WIREMODULE

[env:release_Sensormodul_v30_SAMD_Vpm]
extends = SAMD
build_flags =
  ${SAMD.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_V3
  -D PRESENCEMODULE

[env:release_Sensormodul_v40_RP2040]
extends = RP2040
build_flags =
  ${RP2040.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_V40
  -D WIREMODULE
  -D PRESENCEMODULE

[env:release_Sensormodul_v40_RP2040_Vpm]
extends = RP2040
build_flags =
  ${RP2040.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_V40
  -D PRESENCEMODULE

[env:release_Sensormodul_v40_RP2040_Wire]
extends = RP2040
build_flags =
  ${RP2040.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_V40
  -D WIREMODULE

[env:release_SmartMF_1TE_RP2040]
extends = RP2040
build_flags =
  ${RP2040.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_SMARTMF_1TE_RP2040
  -D WIREMODULE
  -D PRESENCEMODULE

[env:release_SmartMF_1TE_RP2040_Vpm]
extends = RP2040
build_flags =
  ${RP2040.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_SMARTMF_1TE_RP2040
  -D PRESENCEMODULE

[env:release_SmartMF_1TE_RP2040_Wire]
extends = RP2040
build_flags =
  ${RP2040.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_SMARTMF_1TE_RP2040
  -D WIREMODULE

[env:release_RealPresence]
extends = RP2040
build_flags =
  ${RP2040.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_HFPM_DEVEL2
  -D SERIAL_HF=Serial2
  -D PRESENCEMODULE
  -D PMMODULE

[env:release_RealPresence_Vpm]
extends = RP2040
build_flags =
  ${RP2040.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_HFPM_DEVEL2
  -D SERIAL_HF=Serial2
  -D PRESENCEMODULE
  -D PMMODULE


### This is an example for enduser compiled environment
[env:enduser]
extends = SAMD
;extends = RP2040
upload_protocol = sam-ba
;upload_protocol = picotool
build_flags =
  ${SAMD.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_V2
;  -D BOARD_MASIFI_HFPM_DEVEL


